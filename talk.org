#+TITLE: Fantasy Land: FP in JavaScript
#+AUTHOR: Einar Nor√∞fj√∂r√∞
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: reveal_slide_number:nil

* Who am I?
- Lead Front End Developer @ Activity Stream
- Contributor to some OSS functional JS libraries

* What is Functional Programming?
The radical notion that
#+ATTR_REVEAL: :frag (appear)
1. Functions are values
2. The logical result of supplying to few arguments to a function, is another function
3. Functions can be composed together to create new functions

** Functions are values
#+BEGIN_SRC javascript
function doubleList(list) {
  const result = [];

  for (let i = 0; i < list.length; ++i) {
    result.push(list[i] * 2);
  }

  return result;
}

doubleList([1, 2, 3]) // [2,4,6]
#+END_SRC

#+REVEAL: split

#+BEGIN_SRC javascript
const double = x => x * 2

result = [1, 2, 3].map(double) // [2,4,6]
#+END_SRC
** The logical result of supplying too few arguments to a function is another function
#+BEGIN_SRC javascript
const multiply = x => y => x * y

result = [1, 2, 3].map(multiply(2)) // [2, 4, 6]
#+END_SRC

#+REVEAL: split
This enables a point free style of programming
#+BEGIN_SRC javascript
const domain_from_email = pipe(
  Maybe,
  map(pipe(toLower, split('@'))),
  chain(head),
  map(pipe(
    replace(/\.{com,org}$/, ''),
    split('.'),
    reverse,
    join('_'),
  )),
  getOrElse('')
)

domain_from_email('einar@example.net') // "net_example"
domain_from_email('einar@example.com') // "example"
#+END_SRC

#+REVEAL: split
Or a dot chaining style

#+BEGIN_SRC javascript
const domain_from_email = email => Maybe(email)
  .map(x => x.toLowerCase().split('@'))
  .chain(split => Maybe(split[0]))
  .map(domain => domain
    .replace(/\.{com,org}/, '')
    .split('.')
    .reverse()
    .join('_')
  )
  .getOrElse('')

domain_from_email('einar@example.net') // "net_example"
domain_from_email('einar@example.com') // "example"
#+END_SRC
** Functions can be composed together to create new functions
~pipe~ does left to right composition

~compose~ does right to left composition

#+BEGIN_SRC javascript
// List Number -> String
const format_RangedFilter = compose(join(' - '), map(number_format(',.0f')))

format_RangedFilter(new RangedFilter(0, 100)) // "0 - 100"

const format_RangedFilter = pipe(
  map(number_format(',.0f')),
  join(' - ')
)

format_RangedFilter(new RangedFilter(0, 100)) // "0 - 100"
#+END_SRC

Rule of thumb: Use ~pipe~ when you need to do multi line composition. Use ~compose~ for single line compositions.

* Fantasy land
A specification for the interoperability of algebraic datatypes in JavaScript
[[./fantasy-land-deps.png]]
** How it came about
#+ATTR_REVEAL: :frag (appear)
1. Promises
2. FP programmers
3. Domenic [[./fantasy-land-issue.png]]
** Yeah but why?
1. Everything has the same interface (Futures, Streams, Lists, Maybe, Either, e.t.c.)
2. Same interface for synchronous and asynchronous values
3. The laws of the methods are explicit

* Demo Time: Implementing the identity monad
* Monad
** Functor
Anything you can map.
#+BEGIN_SRC
map :: Functor f => f a ~> (a -> b) -> f b
#+END_SRC

** Apply
A functor you can ap values into.

Helps teach functions how to work with your values.

#+BEGIN_SRC
ap :: Apply f => f (a -> b) ~> f a -> f b
#+END_SRC

** Applicative
An Apply with an of method.
#+BEGIN_SRC
of :: Applicative f => a -> f a
#+END_SRC

** Chain
A functor that can be flatmapped
#+BEGIN_SRC
chain :: Chain m => m a ~> (a -> m b) -> m b
#+END_SRC
 
* Some libraries
- Ramda :: A practical functional library for JavaScript programmers
- Sanctuary :: A refuge from unsafe JavaScript
- Flutureü¶ã :: FantasyLand compliant (monadic) alternative to Promises
- Flyd :: Monadic Reactive Streams
- data.maybe :: Maybe implementation

